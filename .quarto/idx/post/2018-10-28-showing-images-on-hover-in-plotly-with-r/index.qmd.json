{"title":"Showing images on hover in Plotly with R","markdown":{"yaml":{"title":"Showing images on hover in Plotly with R","author":"Bas","date":"2018-10-28"},"containsRefs":false,"markdown":"\n\nFor a project I was working on recently, I wanted to turn a `ggplot` scatterplot into an interactive visualisation: when hovering over a point, a corresponding image needed to be shown. I did not want to use Shiny, since I required the visualisation to be portable. This is possible by [manually tinkering with html](\nhttps://github.com/etpinard/plotly-dashboards/tree/master/hover-images), but using the `plotly` and `htmlwidgets` packages, I was able to achieve what I wanted without the need to leave the comfy RStudio environment, and without needing to host the plot on the plot.ly website.  \n\nThe [plotly](https://plot.ly/r/) library provides the useful `ggplotly` function to make static plots interactive with just one line of code. If we apply it to a `ggplot` of the famous `iris` dataset, it looks like this.\n\n```{r message=FALSE, warning=FALSE}\nlibrary(tidyverse)\nlibrary(plotly)\n\ng <- ggplot(iris, aes(x = Sepal.Length,\n                      y = Petal.Length,\n                      color = Species)) + geom_point()\np <- ggplotly(g) %>% partial_bundle()\n\np\n```\n\nAmong other things, we can now hover over a point on the graph and in the tooltip receive information about the corresponding data point. By default, the information displayed is exactly the information we define in the `aes` mapping. If we want other information, we can add it in the `text` aesthetic, which plotly can read. If we provide `ggplotly` with the `tooltip = \"text\"` option, this aesthetic is the only thing that is shown.\n\n```{r}\ng <- ggplot(iris, aes(x = Sepal.Length,\n                      y = Petal.Length,\n                      color = Species,\n                      text = Species)) + geom_point()\np <- ggplotly(g, tooltip = \"text\") %>% partial_bundle() \n\np\n```\n\nThis already looks nice and clean. As can be seen [in the plotly documentation](https://plot.ly/r/hover-events/), a custom JavaScript function can be called when hovering over a point, and the tooltip text can be retrieved in this function. However, other than in the documentation, we do not need to change any html code or write long JavaScript code; using the `htmltools::onRender` function we can inject a custom JavaScript function into the generated plot.  \nIn this example, I chose to store the images locally, but one can also use base64 objects like in the documentation to make it even more portable.  \n\nWe define a function that takes a plotly element and calls another function when hovering over this element. The point's tooltip can be retrieved with `d.points[0].data.text`. Since we made this nice and clean, this is the corresponding plant's species as a string. Locally, I have stored the images in the folder corresponding to this blogpost, with filenames `setosa.jpg`, `virginica.jpg` and `versicolor.jpg`. The path to the correct image is constructed and assigned to the `image_location` variable.  \nNext, we define an object which points to the correct image and defines the position and the size we want the image to take.  \nFinally, by calling `Plotly.relayout` the new layout is applied in which we attach this image object in the layout's `images` attribute.\n\n```{r}\np %>% htmlwidgets::onRender(\"\n    function(el, x) {\n      // when hovering over an element, do something\n      el.on('plotly_hover', function(d) {\n\n        // extract tooltip text\n        txt = d.points[0].data.text;\n        // image is stored locally\n        image_location = '../2018-10-28-showing-images-on-hover-in-plotly-with-r/' + txt + '.jpg';\n\n        // define image to be shown\n        var img = {\n          // location of image\n          source: image_location,\n          // top-left corner\n          x: 0,\n          y: 1,\n          sizex: 0.2,\n          sizey: 0.2,\n          xref: 'paper',\n          yref: 'paper'\n        };\n\n        // show image and annotation \n        Plotly.relayout(el.id, {\n            images: [img] \n        });\n      })\n    }\n    \")\n```\n\nTada! Hovering over a point now shows an image of the corresponding species in the top-left corner. Instead of an image, text can also be shown by adding a `text` attribute to the `var img` definition and adding `annotations: [img]` to the `Plotly.relayout` function.  \n\nThis visualisation can now be exported to html with `htmltools::saveWidget()` and shared with anyone, the recipient does not need not have `R` installed. Do make sure to also share the folder with the images though, since these are not embedded.\n","srcMarkdownNoYaml":"\n\nFor a project I was working on recently, I wanted to turn a `ggplot` scatterplot into an interactive visualisation: when hovering over a point, a corresponding image needed to be shown. I did not want to use Shiny, since I required the visualisation to be portable. This is possible by [manually tinkering with html](\nhttps://github.com/etpinard/plotly-dashboards/tree/master/hover-images), but using the `plotly` and `htmlwidgets` packages, I was able to achieve what I wanted without the need to leave the comfy RStudio environment, and without needing to host the plot on the plot.ly website.  \n\nThe [plotly](https://plot.ly/r/) library provides the useful `ggplotly` function to make static plots interactive with just one line of code. If we apply it to a `ggplot` of the famous `iris` dataset, it looks like this.\n\n```{r message=FALSE, warning=FALSE}\nlibrary(tidyverse)\nlibrary(plotly)\n\ng <- ggplot(iris, aes(x = Sepal.Length,\n                      y = Petal.Length,\n                      color = Species)) + geom_point()\np <- ggplotly(g) %>% partial_bundle()\n\np\n```\n\nAmong other things, we can now hover over a point on the graph and in the tooltip receive information about the corresponding data point. By default, the information displayed is exactly the information we define in the `aes` mapping. If we want other information, we can add it in the `text` aesthetic, which plotly can read. If we provide `ggplotly` with the `tooltip = \"text\"` option, this aesthetic is the only thing that is shown.\n\n```{r}\ng <- ggplot(iris, aes(x = Sepal.Length,\n                      y = Petal.Length,\n                      color = Species,\n                      text = Species)) + geom_point()\np <- ggplotly(g, tooltip = \"text\") %>% partial_bundle() \n\np\n```\n\nThis already looks nice and clean. As can be seen [in the plotly documentation](https://plot.ly/r/hover-events/), a custom JavaScript function can be called when hovering over a point, and the tooltip text can be retrieved in this function. However, other than in the documentation, we do not need to change any html code or write long JavaScript code; using the `htmltools::onRender` function we can inject a custom JavaScript function into the generated plot.  \nIn this example, I chose to store the images locally, but one can also use base64 objects like in the documentation to make it even more portable.  \n\nWe define a function that takes a plotly element and calls another function when hovering over this element. The point's tooltip can be retrieved with `d.points[0].data.text`. Since we made this nice and clean, this is the corresponding plant's species as a string. Locally, I have stored the images in the folder corresponding to this blogpost, with filenames `setosa.jpg`, `virginica.jpg` and `versicolor.jpg`. The path to the correct image is constructed and assigned to the `image_location` variable.  \nNext, we define an object which points to the correct image and defines the position and the size we want the image to take.  \nFinally, by calling `Plotly.relayout` the new layout is applied in which we attach this image object in the layout's `images` attribute.\n\n```{r}\np %>% htmlwidgets::onRender(\"\n    function(el, x) {\n      // when hovering over an element, do something\n      el.on('plotly_hover', function(d) {\n\n        // extract tooltip text\n        txt = d.points[0].data.text;\n        // image is stored locally\n        image_location = '../2018-10-28-showing-images-on-hover-in-plotly-with-r/' + txt + '.jpg';\n\n        // define image to be shown\n        var img = {\n          // location of image\n          source: image_location,\n          // top-left corner\n          x: 0,\n          y: 1,\n          sizex: 0.2,\n          sizey: 0.2,\n          xref: 'paper',\n          yref: 'paper'\n        };\n\n        // show image and annotation \n        Plotly.relayout(el.id, {\n            images: [img] \n        });\n      })\n    }\n    \")\n```\n\nTada! Hovering over a point now shows an image of the corresponding species in the top-left corner. Instead of an image, text can also be shown by adding a `text` attribute to the `var img` definition and adding `annotations: [img]` to the `Plotly.relayout` function.  \n\nThis visualisation can now be exported to html with `htmltools::saveWidget()` and shared with anyone, the recipient does not need not have `R` installed. Do make sure to also share the folder with the images though, since these are not embedded.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"html-math-method":"katex","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.33","theme":["cosmo"],"respect-user-color-scheme":true,"title":"Showing images on hover in Plotly with R","author":"Bas","date":"2018-10-28"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}