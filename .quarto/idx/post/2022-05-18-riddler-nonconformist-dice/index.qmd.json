{"title":"Riddler: Nonconformist Dice","markdown":{"yaml":{"title":"Riddler: Nonconformist Dice","author":"Bas","date":"2022-05-18"},"headingText":"all possible throws","containsRefs":false,"markdown":"\n\n```{r warning=FALSE, include=FALSE}\nreticulate::use_condaenv(\"basjacobs\")\n```\n\n\nLast week's [Riddler Classic](https://fivethirtyeight.com/features/its-elementary-my-dear-riddler/) is a question about rolling tetrahedral dice:\n\n> You have four fair tetrahedral dice whose four sides are numbered 1 through 4.  \nYou play a game in which you roll them all and divide them into two groups: those whose values are unique, and those which are duplicates. For example, if you roll a 1, 2, 2 and 4, then the 1 and 4 will go into the “unique” group, while the 2s will go into the “duplicate” group.  \nNext, you reroll all the dice in the duplicate pool and sort all the dice again. Continuing the previous example, that would mean you reroll the 2s. If the result happens to be 1 and 3, then the “unique” group will now consist of 3 and 4, while the “duplicate” group will have two 1s.  \nYou continue rerolling the duplicate pool and sorting all the dice until all the dice are members of the same group. If all four dice are in the “unique” group, you win. If all four are in the “duplicate” group, you lose.\nWhat is your probability of winning the game?\n\nWe will answer this question using a Markov Chain in python. For that, we will use `numpy` (for matrix multiplication), `collections.Counter` (for easy counting) and `itertools.product` (for throwing dice).\n\n```{python}\nfrom collections import Counter\nfrom itertools import product\nimport numpy as np\n```\n\nFirst, let's calculate the probability of every possible throw with four tetrahedral dice. We will represent a dice throw as an ordered string.\n\n```{python}\nthrows = [\"\".join(str(i) for i in state) for state in product([1,2,3,4], repeat=4)]\n# aggregate identical throws and calculate probabilities\nall_states = [\"\".join(sorted(throw)) for throw in throws]\nfreqs = Counter(all_states).items()\nthrow = {k: v/(4**4) for k, v in freqs}\nprint(\"\\n\".join([f\"{k}: {v}\" for k, v in throw.items()][:12]) + \"\\n...\")\n```\n\nIn addition to these throw results, we have two states the chain can be in: `\"loss\"` and `\"win\"`.\n\n```{python}\nstates = list(throw.keys()) + [\"loss\", \"win\"]\nstates\n```\n\nNext, we calculate the probability of going from one state to another. The following function will calculate all transition probabilities starting from state `from_state`. Remember we can roll every die in the \"unique\" group, but cannot change the die in the \"duplicate\" group. The states for `\"loss\"` and `\"win\"` are absorbing states.\n\n```{python}\ndef transition_probs(from_state):\n  # Return all transition probabilities from state `from_state`\n  \n  # initially fill all probabilities with zero\n  probs = {state: 0 for state in states}\n  \n  counts = Counter(from_state)\n  uniques = [k for k, v in counts.items() if v == 1]\n  \n  if len(uniques) == 0 or from_state == \"loss\":\n    probs[\"loss\"] = 1\n    return probs\n  elif len(uniques) == 4 or from_state == \"win\":\n    probs[\"win\"] = 1\n    return probs\n  \n  # number of dice to throw again\n  n_dice = 4 - len(uniques) \n  # calculate possible new states\n  draws = [\"\".join(str(i) for i in state) for state in product([1,2,3,4], repeat=n_dice)]\n  new_states = [\"\".join(sorted(draw + \"\".join(uniques))) for draw in draws]\n  # calculate new states' probabilities\n  freqs = Counter(new_states).items()\n  throw_probs = {k: v/(4**n_dice) for k, v in freqs}\n  \n  probs.update(throw_probs)\n  \n  return probs\n```\n\nFor example, if we start with `\"1112\"`, we throw the three `\"1\"` dice again, but keep the die with a `\"2\"`. Therefore the probability mass is distributed over throws containing a `\"2\"`.\n\n```{python}\ntransition_probs(\"1112\")\n```\n\nNext, we can generate a Markov matrix containing these transition probabilities for every starting state.\n\n```{python}\nmarkov_mat = [[v for k, v in transition_probs(state).items()] for state in states]\nmarkov_mat = np.asarray(markov_mat) # turn into numpy array for matrix multiplication\nmarkov_mat.shape\n```\n\nTogether with an initial throw, we can then simulate a round of the game by multiplying the vector corresponding to the initial throw with the Markov matrix..\n\n```{python}\nfirst_throw = np.array([v for k, v in throw.items()] + [0, 0])\n\nres = first_throw @ markov_mat\ndict(zip(states, res))\n```\n\nWe can just as easily simulate multiple rounds of the game by taking the matrix to a certain power.  \nAfter 20 rounds, it becomes apparent that the probability of winning seems to be 45%.\n\n```{python}\nres = first_throw @ np.linalg.matrix_power(markov_mat, 20)\ndict(zip(states, res))\n```\n\nSimulating the game for 1000 rounds confirms this.\n\n```{python}\nres = first_throw @ np.linalg.matrix_power(markov_mat, 1000)\ndict(zip(states, res))\n```\n\nWhat's interesting is that you have a higher probability of winning (48.3%) if you start with a pair.\n\n```{python}\ndict(zip(states, np.linalg.matrix_power(markov_mat, 1000)[:,-1]))\n```\n\nAnd that is how easy and elegant it can be to answer such a question using a Markov chain. Until next time!\n","srcMarkdownNoYaml":"\n\n```{r warning=FALSE, include=FALSE}\nreticulate::use_condaenv(\"basjacobs\")\n```\n\n\nLast week's [Riddler Classic](https://fivethirtyeight.com/features/its-elementary-my-dear-riddler/) is a question about rolling tetrahedral dice:\n\n> You have four fair tetrahedral dice whose four sides are numbered 1 through 4.  \nYou play a game in which you roll them all and divide them into two groups: those whose values are unique, and those which are duplicates. For example, if you roll a 1, 2, 2 and 4, then the 1 and 4 will go into the “unique” group, while the 2s will go into the “duplicate” group.  \nNext, you reroll all the dice in the duplicate pool and sort all the dice again. Continuing the previous example, that would mean you reroll the 2s. If the result happens to be 1 and 3, then the “unique” group will now consist of 3 and 4, while the “duplicate” group will have two 1s.  \nYou continue rerolling the duplicate pool and sorting all the dice until all the dice are members of the same group. If all four dice are in the “unique” group, you win. If all four are in the “duplicate” group, you lose.\nWhat is your probability of winning the game?\n\nWe will answer this question using a Markov Chain in python. For that, we will use `numpy` (for matrix multiplication), `collections.Counter` (for easy counting) and `itertools.product` (for throwing dice).\n\n```{python}\nfrom collections import Counter\nfrom itertools import product\nimport numpy as np\n```\n\nFirst, let's calculate the probability of every possible throw with four tetrahedral dice. We will represent a dice throw as an ordered string.\n\n```{python}\n# all possible throws\nthrows = [\"\".join(str(i) for i in state) for state in product([1,2,3,4], repeat=4)]\n# aggregate identical throws and calculate probabilities\nall_states = [\"\".join(sorted(throw)) for throw in throws]\nfreqs = Counter(all_states).items()\nthrow = {k: v/(4**4) for k, v in freqs}\nprint(\"\\n\".join([f\"{k}: {v}\" for k, v in throw.items()][:12]) + \"\\n...\")\n```\n\nIn addition to these throw results, we have two states the chain can be in: `\"loss\"` and `\"win\"`.\n\n```{python}\nstates = list(throw.keys()) + [\"loss\", \"win\"]\nstates\n```\n\nNext, we calculate the probability of going from one state to another. The following function will calculate all transition probabilities starting from state `from_state`. Remember we can roll every die in the \"unique\" group, but cannot change the die in the \"duplicate\" group. The states for `\"loss\"` and `\"win\"` are absorbing states.\n\n```{python}\ndef transition_probs(from_state):\n  # Return all transition probabilities from state `from_state`\n  \n  # initially fill all probabilities with zero\n  probs = {state: 0 for state in states}\n  \n  counts = Counter(from_state)\n  uniques = [k for k, v in counts.items() if v == 1]\n  \n  if len(uniques) == 0 or from_state == \"loss\":\n    probs[\"loss\"] = 1\n    return probs\n  elif len(uniques) == 4 or from_state == \"win\":\n    probs[\"win\"] = 1\n    return probs\n  \n  # number of dice to throw again\n  n_dice = 4 - len(uniques) \n  # calculate possible new states\n  draws = [\"\".join(str(i) for i in state) for state in product([1,2,3,4], repeat=n_dice)]\n  new_states = [\"\".join(sorted(draw + \"\".join(uniques))) for draw in draws]\n  # calculate new states' probabilities\n  freqs = Counter(new_states).items()\n  throw_probs = {k: v/(4**n_dice) for k, v in freqs}\n  \n  probs.update(throw_probs)\n  \n  return probs\n```\n\nFor example, if we start with `\"1112\"`, we throw the three `\"1\"` dice again, but keep the die with a `\"2\"`. Therefore the probability mass is distributed over throws containing a `\"2\"`.\n\n```{python}\ntransition_probs(\"1112\")\n```\n\nNext, we can generate a Markov matrix containing these transition probabilities for every starting state.\n\n```{python}\nmarkov_mat = [[v for k, v in transition_probs(state).items()] for state in states]\nmarkov_mat = np.asarray(markov_mat) # turn into numpy array for matrix multiplication\nmarkov_mat.shape\n```\n\nTogether with an initial throw, we can then simulate a round of the game by multiplying the vector corresponding to the initial throw with the Markov matrix..\n\n```{python}\nfirst_throw = np.array([v for k, v in throw.items()] + [0, 0])\n\nres = first_throw @ markov_mat\ndict(zip(states, res))\n```\n\nWe can just as easily simulate multiple rounds of the game by taking the matrix to a certain power.  \nAfter 20 rounds, it becomes apparent that the probability of winning seems to be 45%.\n\n```{python}\nres = first_throw @ np.linalg.matrix_power(markov_mat, 20)\ndict(zip(states, res))\n```\n\nSimulating the game for 1000 rounds confirms this.\n\n```{python}\nres = first_throw @ np.linalg.matrix_power(markov_mat, 1000)\ndict(zip(states, res))\n```\n\nWhat's interesting is that you have a higher probability of winning (48.3%) if you start with a pair.\n\n```{python}\ndict(zip(states, np.linalg.matrix_power(markov_mat, 1000)[:,-1]))\n```\n\nAnd that is how easy and elegant it can be to answer such a question using a Markov chain. Until next time!\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"html-math-method":"katex","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.33","theme":["cosmo"],"respect-user-color-scheme":true,"title":"Riddler: Nonconformist Dice","author":"Bas","date":"2022-05-18"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}