{"title":"Riddler: Can You Eat All The Chocolates?","markdown":{"yaml":{"title":"Riddler: Can You Eat All The Chocolates?","author":"Bas","date":"2020-10-02"},"headingText":"Simulation in R","containsRefs":false,"markdown":"\n\n[Today's 538 Riddler Classic](https://fivethirtyeight.com/features/can-you-eat-all-the-chocolates/) is about eating chocolates:\n\n> I have 10 chocolates in a bag: Two are milk chocolate, while the other eight are dark chocolate. One at a time, I randomly pull chocolates from the bag and eat them --- that is, until I pick a chocolate of the other kind. When I get to the other type of chocolate, I put it back in the bag and start drawing again with the remaining chocolates. I keep going until I have eaten all 10 chocolates.\n>\n> For example, if I first pull out a dark chocolate, I will eat it. (I'll always eat the first chocolate I pull out.) If I pull out a second dark chocolate, I will eat that as well. If the third one is milk chocolate, I will not eat it (yet), and instead place it back in the bag. Then I will start again, eating the first chocolate I pull out.\n>\n> What are the chances that the *last* chocolate I eat is milk chocolate?\n\nOur first approach will be a simple simulation to gauge what the answer should approximately be, before going to an analytical approach.\n\n*Added later: it turns out I misread the question. I assumed that after taking a chocolate that I could not eat, I would put it back and only eat the next one if it is of the same type. That is, however, not what's asked: you always eat the following chocolate after you put one back, regardless of its type. I will keep my answer to the (wrong) question below for those who are interested.*\n\n\nThe following R function simulates eating one bag of chocolates and outputs what the last chocolate was.\n\n```{r}\nchocolates <- c(rep(\"m\", 2), rep(\"d\", 8))\n\neat_chocolates <- function() {\n  # shuffle the chocolates around\n  chocolates_left <- sample(chocolates)\n\n  # eat the first chocolate\n  last_taken <- chocolates_left[1]\n  chocolates_left <- chocolates_left[-1]\n\n  # eat the rest of the chocolates\n  while (length(chocolates_left) > 0) {\n    # take the first chocolate out of the bag\n    to_eat <- chocolates_left[1]\n    chocolates_left <- chocolates_left[-1]\n\n    # put back and shuffle if differs from previous piece\n    if (to_eat != last_taken) {\n      chocolates_left <- sample(c(to_eat, chocolates_left))\n    }\n\n    last_taken <- to_eat\n  }\n\n  last_taken\n}\n```\n\nWe can now easily run, for example, 100,000 simulations and calculate the percentage in which the last chocolate was milk:\n\n```{r}\nsimulations <- replicate(1e5, eat_chocolates())\nmean(simulations == \"m\")\n```\n\nIn a couple of seconds, this gives an estimate of a 46% probability of ending with a piece of milk chocolate. This is closer to 50% than I initially expected. Intuitively though, it does make sense, given the nature of the problem that the majority chocolate type will be eaten relatively quickly, since it is easier to get a 'streak' of those.\n\nRunning this (admittedly naive) simulation for more than, say, 1 million replications quickly becomes intractable. For a more accurate result that does run quickly, we can resort to recursion.\n\n## Recursion\n\nThe problem ca be written in a recursive form: given a number of milk and dark chocolates, we can create a set of possible next states and attach probabilities to those states. We can repeat this until we arrive at a bag of only one type of chocolate.\n\nIn order to do that, let's first introduce some notation. Let $P(m, d, x)$ be the probability of ending with a milk chocolate given that we currently have a bag of $m$ milk and $d$ dark chocolates and that the last chocolate we ate was of type $x\\in\\{\\text{milk}, \\text{dark}\\}$. Denote by $x^c$ the chocolate type that is not $x$. We then know the trivial cases $P(m, 0, x) = 1$ and $P(0,d,x)=0$; you can't \"fail\" if you only have milk left, and you can't \"succeed\" if you only have dark chocolates left.\n\nMoreover, the probability of ending with a milk chocolate given a certain distribution of chocolates and a previous pick equals the probability of ending with a dark chocolate given that we have switched all dark and milk chocolates around. In mathematical terms, $P(m,d|x) = 1-P(d,m|x^c)$.\n\nNow, given a state $(m,d, \\text{milk})$, you will pick a milk chocolate with probability $\\frac{m}{m+d}$, resulting in a state of $(m-1, d, \\text{milk})$, or you will pick dark with probability $\\frac{d}{m+d}$, resulting in $(m, d, \\text{dark})$. In other words, given $m,d>0$,$$\nP(m, d, \\text{milk}) = \\frac{m}{m+d}\\cdot P(m-1,d,\\text{milk})\\,+\\,\\frac{d}{m+d}\\cdot P(m,d,\\text{dark}).\n$$\n\nWe can now immediately see a problem with programming this recursion as it is: the second term did not decrease the total number of chocolates. Were we to do another step, we could again arrive at the situation we started with, thus resulting in an endless loop. In other words, theoretically we could keep alternately picking $\\text{milk}$ and $\\text{dark}$ chocolates and never finish the whole bag.\n\nWe need to go deeper.\n\nLet's do another recursion step by expanding the right-most term in the above equation:\n\n$$\nP(m,d,\\text{dark}) = \\frac{m}{m+d}\\cdot P(m,d,\\text{milk})\\,+\\,\\frac{d}{m+d}\\cdot P(m,d-1,\\text{dark}).\n$$\n\nFilling this into the first equation,\n\n$$\nP(m, d, \\text{milk}) = \\frac{m}{m+d}\\cdot P(m-1,d,\\text{milk})\\,+\\,\\frac{d}{m+d}\\cdot \\left(\\frac{m}{m+d}\\cdot P(m,d,\\text{milk})\\,+\\,\\frac{d}{m+d}\\cdot P(m,d-1,\\text{dark})\\right),\n$$\n\nwhich we can rearrange into\n\n$$\nP(m, d, \\text{milk}) - \\frac{md}{(m+d)^2}\\cdot P(m,d,\\text{milk}) = \\frac{m}{m+d}\\cdot P(m-1,d,\\text{milk})\\,+\\,\\frac{d^2}{(m+d)^2}\\cdot P(m,d-1,\\text{dark}),\n$$\n\nor\n\n$$\n\\frac{(m+d)^2-md}{(m+d)^2}\\cdot P(m,d,\\text{milk}) = \\frac{m}{m+d}\\cdot P(m-1,d,\\text{milk})\\,+\\,\\frac{d^2}{(m+d)^2}\\cdot P(m,d-1,\\text{dark}),\n$$\n\nwhich gives\n\n$$\nP(m,d,\\text{milk}) = \\frac{m^2+md}{m^2+d^2+md}\\cdot P(m-1,d,\\text{milk})\\,+\\,\\frac{d^2}{m^2+d^2+md}\\cdot P(m,d-1,\\text{dark}).\n$$\n\nNow, by magic, this recursion does strictly decrease the total number of chocolates in the bag, thus making a program feasible. Together with the relationship $P(m,d,\\text{dark})=1-P(d,m,\\text{milk})$, we can calculate our quantity of interest, which is the probability of ending with a milk chocolate given a starting bag and no previous chocolates eaten:\n\n$$\nP(m,d)=\\frac{m}{m+d}\\cdot P(m-1,d,\\text{milk})\\,+\\,\\frac{d}{m+d}\\cdot P(m,d-1,\\text{dark}).\n$$\n\nIn R code, this recursion can be programmed as follows.\n\n```{r}\nP <- function(m, d, previous = \"\") {\n  if (m == 0) {\n    return(0)\n  } else if (d == 0) {\n    return(1)\n  }\n\n  if (previous == \"\") {\n    m/(m+d)*P(m-1, d, \"milk\") + d/(m+d)*P(m, d-1, \"dark\")\n  } else if (previous == \"milk\") {\n    (m^2+m*d)/(m^2+d^2+m*d)*P(m-1, d, \"milk\") + (d^2)/(m^2+d^2+m*d)*P(m, d-1, \"dark\")\n  } else if (previous == \"dark\") {\n    1 - P(d, m, \"milk\")\n  }\n}\n```\n\nThis allows us to calculate some simple examples,\n\n```{r}\nP(2,0)\nP(0,2)\nP(1,1)\n```\n\nbut also the actual quantity of interest\n\n```{r}\nP(2,8)\n```\n\nwithin a second. This agrees with the outcome of our simulation: the probability of ending with a milk chocolate is about 46.15%.\n\n## Other starting points\n\nNow that we have code that runs quickly, we can explore the probabilities for other mixes of chocolates.\n\nSay we start with 2 milk chocolates, but vary the number of dark chocolates.\n\n```{r message=FALSE}\nlibrary(tidyverse)\ntheme_set(theme_light())\n\nsimulations <- tibble(m = 2, d = 1:100) %>%\n  rowwise() %>%\n  mutate(p = P(m, d))\n\nggplot(simulations, aes(d, p)) +\n  geom_line() +\n  scale_y_continuous(labels = scales::percent_format()) +\n  labs(title = \"Probability of ending with a milk chocolate\",\n       subtitle = \"Given 2 milk and a varying number of dark chocolates\",\n       x = \"Number of dark chocolates\",\n       y = \"Probability\")\n```\n\nAt first, the probability of success drops quickly, but at some point the streaks of dark chocolates will be so common that adding more dark chocolates does not decrease this probability significantly.\n\nWe can do the same thing in two dimensions by also varying the number of milk chocolates. Now, memoization comes in handy, since otherwise we calculate the same probability many times. The function `P_mem` calculates `P` but checks whether a certain probability has already been calculated in the list of matrices `mem`.\n\n```{r}\nn_max <- 20\nmem <- list(milk = matrix(nrow = n_max, ncol = n_max),\n            dark = matrix(nrow = n_max, ncol = n_max))\n\nP_mem <- function(m, d, previous = \"\") {\n  if (m == 0) {\n    return(0)\n  } else if (d == 0) {\n    return(1)\n  }\n\n  if (previous != \"\" && !is.na(mem[[previous]][m, d])) {\n    return(mem[[previous]][m, d])\n  }\n\n  if (previous == \"\") {\n    res <- m/(m+d)*P_mem(m-1, d, \"milk\") + d/(m+d)*P_mem(m, d-1, \"dark\")\n  } else if (previous == \"milk\") {\n    res <- (m^2+m*d)/(m^2+d^2+m*d)*P_mem(m-1, d, \"milk\") + (d^2)/(m^2+d^2+m*d)*P_mem(m, d-1, \"dark\")\n    mem[[previous]][m, d] <<- res\n  } else if (previous == \"dark\") {\n    res <- 1 - P_mem(d, m, \"milk\")\n    mem[[previous]][m, d] <<- res\n  }\n\n  res\n}\n\nsimulations <- crossing(m = 1:n_max, d = 1:n_max) %>%\n  rowwise() %>%\n  mutate(p = P_mem(m, d))\n\nggplot(simulations, aes(m, d, fill = p)) +\n  geom_raster() +\n  scale_fill_continuous(labels = scales::percent_format()) +\n  labs(title = \"Probability of ending with a milk chocolate\",\n       x = \"Number of milk chocolates\",\n       y = \"Number of dark chocolates\",\n       fill = \"Probability\")\n```\n\nThis graph shows that the more chocolates there are in the bag, the smaller the differences between different mixes become.\n","srcMarkdownNoYaml":"\n\n[Today's 538 Riddler Classic](https://fivethirtyeight.com/features/can-you-eat-all-the-chocolates/) is about eating chocolates:\n\n> I have 10 chocolates in a bag: Two are milk chocolate, while the other eight are dark chocolate. One at a time, I randomly pull chocolates from the bag and eat them --- that is, until I pick a chocolate of the other kind. When I get to the other type of chocolate, I put it back in the bag and start drawing again with the remaining chocolates. I keep going until I have eaten all 10 chocolates.\n>\n> For example, if I first pull out a dark chocolate, I will eat it. (I'll always eat the first chocolate I pull out.) If I pull out a second dark chocolate, I will eat that as well. If the third one is milk chocolate, I will not eat it (yet), and instead place it back in the bag. Then I will start again, eating the first chocolate I pull out.\n>\n> What are the chances that the *last* chocolate I eat is milk chocolate?\n\nOur first approach will be a simple simulation to gauge what the answer should approximately be, before going to an analytical approach.\n\n*Added later: it turns out I misread the question. I assumed that after taking a chocolate that I could not eat, I would put it back and only eat the next one if it is of the same type. That is, however, not what's asked: you always eat the following chocolate after you put one back, regardless of its type. I will keep my answer to the (wrong) question below for those who are interested.*\n\n## Simulation in R\n\nThe following R function simulates eating one bag of chocolates and outputs what the last chocolate was.\n\n```{r}\nchocolates <- c(rep(\"m\", 2), rep(\"d\", 8))\n\neat_chocolates <- function() {\n  # shuffle the chocolates around\n  chocolates_left <- sample(chocolates)\n\n  # eat the first chocolate\n  last_taken <- chocolates_left[1]\n  chocolates_left <- chocolates_left[-1]\n\n  # eat the rest of the chocolates\n  while (length(chocolates_left) > 0) {\n    # take the first chocolate out of the bag\n    to_eat <- chocolates_left[1]\n    chocolates_left <- chocolates_left[-1]\n\n    # put back and shuffle if differs from previous piece\n    if (to_eat != last_taken) {\n      chocolates_left <- sample(c(to_eat, chocolates_left))\n    }\n\n    last_taken <- to_eat\n  }\n\n  last_taken\n}\n```\n\nWe can now easily run, for example, 100,000 simulations and calculate the percentage in which the last chocolate was milk:\n\n```{r}\nsimulations <- replicate(1e5, eat_chocolates())\nmean(simulations == \"m\")\n```\n\nIn a couple of seconds, this gives an estimate of a 46% probability of ending with a piece of milk chocolate. This is closer to 50% than I initially expected. Intuitively though, it does make sense, given the nature of the problem that the majority chocolate type will be eaten relatively quickly, since it is easier to get a 'streak' of those.\n\nRunning this (admittedly naive) simulation for more than, say, 1 million replications quickly becomes intractable. For a more accurate result that does run quickly, we can resort to recursion.\n\n## Recursion\n\nThe problem ca be written in a recursive form: given a number of milk and dark chocolates, we can create a set of possible next states and attach probabilities to those states. We can repeat this until we arrive at a bag of only one type of chocolate.\n\nIn order to do that, let's first introduce some notation. Let $P(m, d, x)$ be the probability of ending with a milk chocolate given that we currently have a bag of $m$ milk and $d$ dark chocolates and that the last chocolate we ate was of type $x\\in\\{\\text{milk}, \\text{dark}\\}$. Denote by $x^c$ the chocolate type that is not $x$. We then know the trivial cases $P(m, 0, x) = 1$ and $P(0,d,x)=0$; you can't \"fail\" if you only have milk left, and you can't \"succeed\" if you only have dark chocolates left.\n\nMoreover, the probability of ending with a milk chocolate given a certain distribution of chocolates and a previous pick equals the probability of ending with a dark chocolate given that we have switched all dark and milk chocolates around. In mathematical terms, $P(m,d|x) = 1-P(d,m|x^c)$.\n\nNow, given a state $(m,d, \\text{milk})$, you will pick a milk chocolate with probability $\\frac{m}{m+d}$, resulting in a state of $(m-1, d, \\text{milk})$, or you will pick dark with probability $\\frac{d}{m+d}$, resulting in $(m, d, \\text{dark})$. In other words, given $m,d>0$,$$\nP(m, d, \\text{milk}) = \\frac{m}{m+d}\\cdot P(m-1,d,\\text{milk})\\,+\\,\\frac{d}{m+d}\\cdot P(m,d,\\text{dark}).\n$$\n\nWe can now immediately see a problem with programming this recursion as it is: the second term did not decrease the total number of chocolates. Were we to do another step, we could again arrive at the situation we started with, thus resulting in an endless loop. In other words, theoretically we could keep alternately picking $\\text{milk}$ and $\\text{dark}$ chocolates and never finish the whole bag.\n\nWe need to go deeper.\n\nLet's do another recursion step by expanding the right-most term in the above equation:\n\n$$\nP(m,d,\\text{dark}) = \\frac{m}{m+d}\\cdot P(m,d,\\text{milk})\\,+\\,\\frac{d}{m+d}\\cdot P(m,d-1,\\text{dark}).\n$$\n\nFilling this into the first equation,\n\n$$\nP(m, d, \\text{milk}) = \\frac{m}{m+d}\\cdot P(m-1,d,\\text{milk})\\,+\\,\\frac{d}{m+d}\\cdot \\left(\\frac{m}{m+d}\\cdot P(m,d,\\text{milk})\\,+\\,\\frac{d}{m+d}\\cdot P(m,d-1,\\text{dark})\\right),\n$$\n\nwhich we can rearrange into\n\n$$\nP(m, d, \\text{milk}) - \\frac{md}{(m+d)^2}\\cdot P(m,d,\\text{milk}) = \\frac{m}{m+d}\\cdot P(m-1,d,\\text{milk})\\,+\\,\\frac{d^2}{(m+d)^2}\\cdot P(m,d-1,\\text{dark}),\n$$\n\nor\n\n$$\n\\frac{(m+d)^2-md}{(m+d)^2}\\cdot P(m,d,\\text{milk}) = \\frac{m}{m+d}\\cdot P(m-1,d,\\text{milk})\\,+\\,\\frac{d^2}{(m+d)^2}\\cdot P(m,d-1,\\text{dark}),\n$$\n\nwhich gives\n\n$$\nP(m,d,\\text{milk}) = \\frac{m^2+md}{m^2+d^2+md}\\cdot P(m-1,d,\\text{milk})\\,+\\,\\frac{d^2}{m^2+d^2+md}\\cdot P(m,d-1,\\text{dark}).\n$$\n\nNow, by magic, this recursion does strictly decrease the total number of chocolates in the bag, thus making a program feasible. Together with the relationship $P(m,d,\\text{dark})=1-P(d,m,\\text{milk})$, we can calculate our quantity of interest, which is the probability of ending with a milk chocolate given a starting bag and no previous chocolates eaten:\n\n$$\nP(m,d)=\\frac{m}{m+d}\\cdot P(m-1,d,\\text{milk})\\,+\\,\\frac{d}{m+d}\\cdot P(m,d-1,\\text{dark}).\n$$\n\nIn R code, this recursion can be programmed as follows.\n\n```{r}\nP <- function(m, d, previous = \"\") {\n  if (m == 0) {\n    return(0)\n  } else if (d == 0) {\n    return(1)\n  }\n\n  if (previous == \"\") {\n    m/(m+d)*P(m-1, d, \"milk\") + d/(m+d)*P(m, d-1, \"dark\")\n  } else if (previous == \"milk\") {\n    (m^2+m*d)/(m^2+d^2+m*d)*P(m-1, d, \"milk\") + (d^2)/(m^2+d^2+m*d)*P(m, d-1, \"dark\")\n  } else if (previous == \"dark\") {\n    1 - P(d, m, \"milk\")\n  }\n}\n```\n\nThis allows us to calculate some simple examples,\n\n```{r}\nP(2,0)\nP(0,2)\nP(1,1)\n```\n\nbut also the actual quantity of interest\n\n```{r}\nP(2,8)\n```\n\nwithin a second. This agrees with the outcome of our simulation: the probability of ending with a milk chocolate is about 46.15%.\n\n## Other starting points\n\nNow that we have code that runs quickly, we can explore the probabilities for other mixes of chocolates.\n\nSay we start with 2 milk chocolates, but vary the number of dark chocolates.\n\n```{r message=FALSE}\nlibrary(tidyverse)\ntheme_set(theme_light())\n\nsimulations <- tibble(m = 2, d = 1:100) %>%\n  rowwise() %>%\n  mutate(p = P(m, d))\n\nggplot(simulations, aes(d, p)) +\n  geom_line() +\n  scale_y_continuous(labels = scales::percent_format()) +\n  labs(title = \"Probability of ending with a milk chocolate\",\n       subtitle = \"Given 2 milk and a varying number of dark chocolates\",\n       x = \"Number of dark chocolates\",\n       y = \"Probability\")\n```\n\nAt first, the probability of success drops quickly, but at some point the streaks of dark chocolates will be so common that adding more dark chocolates does not decrease this probability significantly.\n\nWe can do the same thing in two dimensions by also varying the number of milk chocolates. Now, memoization comes in handy, since otherwise we calculate the same probability many times. The function `P_mem` calculates `P` but checks whether a certain probability has already been calculated in the list of matrices `mem`.\n\n```{r}\nn_max <- 20\nmem <- list(milk = matrix(nrow = n_max, ncol = n_max),\n            dark = matrix(nrow = n_max, ncol = n_max))\n\nP_mem <- function(m, d, previous = \"\") {\n  if (m == 0) {\n    return(0)\n  } else if (d == 0) {\n    return(1)\n  }\n\n  if (previous != \"\" && !is.na(mem[[previous]][m, d])) {\n    return(mem[[previous]][m, d])\n  }\n\n  if (previous == \"\") {\n    res <- m/(m+d)*P_mem(m-1, d, \"milk\") + d/(m+d)*P_mem(m, d-1, \"dark\")\n  } else if (previous == \"milk\") {\n    res <- (m^2+m*d)/(m^2+d^2+m*d)*P_mem(m-1, d, \"milk\") + (d^2)/(m^2+d^2+m*d)*P_mem(m, d-1, \"dark\")\n    mem[[previous]][m, d] <<- res\n  } else if (previous == \"dark\") {\n    res <- 1 - P_mem(d, m, \"milk\")\n    mem[[previous]][m, d] <<- res\n  }\n\n  res\n}\n\nsimulations <- crossing(m = 1:n_max, d = 1:n_max) %>%\n  rowwise() %>%\n  mutate(p = P_mem(m, d))\n\nggplot(simulations, aes(m, d, fill = p)) +\n  geom_raster() +\n  scale_fill_continuous(labels = scales::percent_format()) +\n  labs(title = \"Probability of ending with a milk chocolate\",\n       x = \"Number of milk chocolates\",\n       y = \"Number of dark chocolates\",\n       fill = \"Probability\")\n```\n\nThis graph shows that the more chocolates there are in the bag, the smaller the differences between different mixes become.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"html-math-method":"katex","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.33","theme":{"light":["cosmo"],"dark":["solar"]},"respect-user-color-scheme":true,"title":"Riddler: Can You Eat All The Chocolates?","author":"Bas","date":"2020-10-02"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}