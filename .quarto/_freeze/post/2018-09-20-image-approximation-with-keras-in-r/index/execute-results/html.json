{
  "hash": "587dfd06c26d3595a3fea3de676f1288",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Learning image representation with Keras in R\nauthor: Bas\ndate: '2018-09-20'\nmath: true\n---\n\nAn image can be viewed as a function mapping pixel locations $x,y$ to color values $R,G,B$. Since neural networks are function approximators, we can train such a network to approximate an image. The network is then a representation of the image as a function and its contents can be displayed by evaluating the network for all pixel pairs $x,y$.  \n\nThe `Keras` package for `R` is now approximately [1 year old](https://blog.rstudio.com/2017/09/05/keras-for-r/) but I have to admit that I usually go to Python to implement neural networks. Since I wanted to try the `imager` package for `R` for a while, let's hit two birds with one stone and do this exercise in `R`.  \n\nFirst, we need the right packages.\n\n``` r\nlibrary(tidyverse)\nlibrary(keras)\nlibrary(imager)\n```\n\nTo honour the name of this blog, let's pick an image of the bird species godwit (scientific name: _limosa_) and load it using `imager`'s `load.image`. \n\n``` r\n# Image from Pixabay\nim_url <- \"https://cdn.pixabay.com/photo/2015/09/18/00/13/bar-tailed-godwit-944883_640.jpg\"\nim <- load.image(im_url)\ndim(im)\n```\n``` \n## [1] 640 480   1   3\n```\n\nThe image is 640x480 pixels in size, consists of 1 frame (it is not a video) and 3 color channels.  \nPlotting the image is easy. We choose to show the image without axes and make the margins small for aestetic reasons.\n\n``` r \nplot(im, axes = FALSE)\n```\n![A godwit. Source: pixabay.com](/post/2018-09-20-image-approximation-with-keras-in-r/image.png){width=600px}\n\nWe convert the image to a data frame by calling `as.data.frame` on the image object. This data frame by default has 4 columns: an _x_ and _y_ column to identify each pixel's location, a color channel column _cc_, and the _value_ this channel takes at this pixel. We spread the key-value pairs in the _cc_ and _value_ columns into columns _cc_1_, _cc_2_, _cc_3_ representing the three color values.\n\n``` r\ndf <- im %>% as.data.frame %>% spread(cc, value)\nhead(df)\n```\n```\n##   x y         1         2         3\n## 1 1 1 0.8117647 0.8941176 0.9607843\n## 2 1 2 0.8117647 0.8941176 0.9607843\n## 3 1 3 0.8117647 0.8941176 0.9607843\n## 4 1 4 0.8117647 0.8980392 0.9529412\n## 5 1 5 0.8196078 0.8941176 0.9529412\n## 6 1 6 0.8117647 0.8862745 0.9450980\n```\n\nThe color values are between 0 (absent) and 1 (present).  \nWe create input and output matrices which can be fed into keras. \n\n``` r\nX <- as.matrix(select(df, x, y))\nY <- as.matrix(select(df, -x, -y))\n```\n\nCreating a neural network with keras is very easy. We tell it that we want an 'ordinary' feed forward neural network with `keras_model_sequential()`. For starters, we create a one-layer network with 2 input nodes (_x_ and _y_ coordinates) and 3 output nodes (_R_, _G_, _B_ values). We choose a 'sigmoid' activation function because we want the output values to be between 0 and 1.\n\n``` r\nmodel <- keras_model_sequential() \nmodel %>%\n  layer_dense(3, input_shape = 2, activation = \"sigmoid\")\nsummary(model)\n```\n```\n## ___________________________________________________________________________\n## Layer (type)                     Output Shape                  Param #     \n## ===========================================================================\n## dense_1 (Dense)                  (None, 3)                     9           \n## ===========================================================================\n## Total params: 9\n## Trainable params: 9\n## Non-trainable params: 0\n## ___________________________________________________________________________\n```\n\nWhen compiling the model, we tell it what loss function we need, what optimizer and what kind of metrics we want it to display while training. We choose a _mean_squared_error_ loss, which means that we penalize every color channel equally, taking the square of the error for every channel and every pixel. We optimize the network using the widely used Adam optimizer and we want to see its accuracy while training.\n\n``` r\nmodel %>% compile(\n  loss = \"mean_squared_error\",\n  optimizer = optimizer_adam(),\n  metrics = \"accuracy\"\n)\n```\n\nNext, we actually fit the model, giving it the expected input and output matrices _X_ and _Y_. We set the batch size to 128 such that training is faster than the default 32. We train the network for 20 epochs.\n\n``` r\nmodel %>% fit(\n  X, Y, \n  batch_size = 128,\n  epochs = 20\n)\n```\n![Training progress](/post/2018-09-20-image-approximation-with-keras-in-r/trainplot.png)\n\nTraining takes about 1 minute, and as can be seen from the training plot, it seems that both the loss and the accuracy have saturated. An accuracy of 0.9 sounds good, but let's take a look at the output image before we get too happy.  \nFirst, we need to recreate the original dataframe with the predicted pixel values. For every $(x,y)$ pair in our matrix _X_ we need to make a prediction. We duplicate the original dataframe fill the color channel columns with the network's output values. We then call `gather` on this dataframe to create the _cc_ and _value_ columns necessary for the `imager` library.\n\n``` r\ndf_out <- df\ndf_out[, 3:5] <- model %>% predict(X)\ndf_out <- df_out %>%\n  gather(key = \"cc\", value = \"value\", -x, -y, convert = TRUE)\n```\n\nWith the data frame in the right form, we can display the result next to the original image very easily. We convert the data frame to an image with the `as.cimg` function and paste it next to the original image by wrapping them inside a list and calling `imappend` on it, specifying we want them appended on the horizontal axis.\n\n``` r\nas.cimg(df_out) %>% list(im, .) %>%\n  imappend(\"x\") %>% plot(axes = F)\n```\n![The network learned a gradient](/post/2018-09-20-image-approximation-with-keras-in-r/model1.png){width=600px}\n\nThe result is a vertical gradient, which can also be seen when looking at the model weights.\n\n``` r\nmodel$get_weights()\n```\n```\n## [[1]]\n##              [,1]         [,2]         [,3]\n## [1,]  0.000755751  0.001207316  0.001467007\n## [2,] -0.002216082 -0.004577803 -0.006758745\n## \n## [[2]]\n## [1] 1.460977 2.029516 2.619324\n```\n\nThe values corresponding to the _x_ column are positive, while the _y_ values are negative and about one order of magnitute larger.\n\n# More layers\nNow let's try a network with more layers. More specifically, let's add two layers with both 10 nodes followed by sigmoid activations.\n\n``` r\nmodel <- keras_model_sequential()\nmodel %>%\n  layer_dense(10, input_shape = 2, activation = \"sigmoid\") %>%\n  layer_dense(10, activation = \"sigmoid\") %>%\n  layer_dense(3, activation = \"sigmoid\")\n\nmodel %>% compile(\n  loss = \"mean_squared_error\",\n  optimizer = optimizer_adam(),\n  metrics = \"accuracy\"\n)\n\nmodel %>% fit(\n  X, Y,\n  batch_size = 128,\n  epochs = 20\n)\n\ndf_out <- df\ndf_out[, 3:5] <- model %>% predict(X)\ndf_out <- df_out %>%\n  gather(key = \"cc\", value = \"value\", -x, -y, convert = TRUE)\n\nas.cimg(df_out) %>% list(im, .) %>%\n  imappend(\"x\") %>% plot(axes = F)\n```\n![Some features of the bird appear](/post/2018-09-20-image-approximation-with-keras-in-r/model2.png){width=600px}\n\nAs can be seen, the image is already picking up some countours of the bird, together with some 'rays' coming from the top-left corner. If we go for an even deeper network, more of the bird's features can be recognized from the image.\n\n``` r\nmodel <- keras_model_sequential()\nmodel %>%\n  layer_dense(100, input_shape = 2, activation = \"tanh\") %>%\n  layer_dense(100, activation = \"relu\") %>%\n  layer_dense(100, activation = \"relu\") %>%\n  layer_dense(100, activation = \"relu\") %>%\n  layer_dense(100, activation = \"relu\") %>%\n  layer_dense(3) %>% \n  layer_activation_relu(max_value=1)\n\nmodel %>% compile(\n  loss = \"mean_squared_error\",\n  optimizer = optimizer_adam(),\n  metrics = \"accuracy\"\n)\n\nmodel %>% fit(\n  X, Y,\n  batch_size = 128,\n  epochs = 100\n)\n\ndf_out <- df\ndf_out[, 3:5] <- model %>% predict(X)\ndf_out <- df_out %>%\n  gather(key = \"cc\", value = \"value\", -x, -y, convert = TRUE)\n\nas.cimg(df_out) %>% list(im, .) %>%\n  imappend(\"x\") %>% plot(axes=F)\n```\n![The image is nicely recovered](/post/2018-09-20-image-approximation-with-keras-in-r/model3.png){width=600px}\n\nWays to improve this might include more layers, more epochs, different activation functions, different loss function. For now, I'm really happy with the result!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}