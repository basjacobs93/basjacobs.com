{
  "hash": "070ae56164ca6cb4e59f1d4000b26477",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: EleksDraw pen plotter with R\nauthor: Bas\ndate: '2021-01-04'\n---\n\n\n\n\nThe [EleksDraw pen plotter](https://wiki.eleksmaker.com/doku.php?id=eleksdraw) is a relatively cheap pen plotter that works like the better-known AxiDraw plotter. Unlike the AxiDraw, it comes as a kit that needs to be assembled, and the only software available is a Windows program. Since I'm using macOS and I wanted more freedom, I decided to fiddle around with it in Python, which resulted in a [blog post](/post/2018-06-28-pen-plotter/) and [accompanying code](https://github.com/basjacobs93/plotter). In this post, I describe how I got to get it working with `ggplot2` in R.\n\n![The EleksDraw pen plotter](/post/2021-01-04-eleksdraw-pen-plotter-with-r/eleksdraw.jpg)\n\n## Python\n\nMy initial python code was very hacky and unstable, so I decided to take a more structured approach, now that I knew I would be able to get it working. I found a nicely structured [project by Michael Fogleman](https://github.com/fogleman/xy) that does the same for the Makeblock XY Plotter. It defines an object that holds the connection to the plotter, and defines methods that send commands to it, like `move()`, `pen_up()` and `pen_down()`. It can render a drawing and store it as an image before sending it to the plotter, which makes it easy to assess an image virtually before physically drawing it. I forked the project, edited the device instructions and restructured it a bit, which resulted in [EleksDrawPy](https://github.com/basjacobs93/EleksDrawPy).\n\nThis new code is a lot easier to use and more stable than my previous attempt. It also allows for usage from R via the [`reticulate` R interface to Python](https://rstudio.github.io/reticulate/).\n\n## R\n\nMy pen plotter was collecting dust when I stumbled upon [fawkes](https://fawkes.data-imaginist.com), \"an R interface to the AxiDraw plotter\" by Thomas Lin Pedersen, who is part of RStudio's `tidyverse` team. It uses `reticulate` to be able to use the AxiDraw python interface from R, and defines a `device` which one can write `ggplot2` plots to, similar to R's built-in `png()` or `pdf()` device. How cool would it be to be able to plot ggplot2 graphs on my plotter?  \n\nIt turned out to be very straightforward to port his code to use my python code. The resulting code can be found [on GitHub](https://github.com/basjacobs93/fawkes). I kept the original code intact, but added the `eleks_dev()` and the `eleks_manual()` functions, which are the counterparts of the `axi_dev()` and `axi_manual()` functions already present. The former can be used as a device like `png()`, the latter for interactive mode (i.e. sending individual commands to the device). I did not create a version of the `axi_svg()` function (that uses the AxiDraw svg plotting capabilities), since my EleksDraw python code does not have this functionality (yet).  \n\nThe `fawkes::ghost_dev()` device that is also present in the package, makes it easy to get a feeling of what the resulting plot will look like. It shows not only the lines that will be drawn, but also the paths the device takes while the pen is in the air.\n\nNow, we can plot ggplot2 graphs from R right onto a piece of paper! Below are some examples. All credits go to Thomas Lin Pedersen and Michael Fogleman, whose code I merely adjusted for my specific goal.\n\n## Results\n\nThe python module can be installed with `pip install -r requirements.txt` (after cloning the project), and the R package with `remotes::install_github('basjacobs93/fawkes')`. The packages we'll use besides the aforementioned `fawkes` and `ggplot2` are `dplyr` (for data manipulation) and `sf` (for using spatial data).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(fawkes)\nlibrary(ggplot2)\nlibrary(sf)\n```\n:::\n\n\nGiven a `ggplot2` plot `p`, the plot can be previewed with the following,\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngd <- ghost_dev('A6', portrait = FALSE, margins = 5, ignore_color = TRUE)\np\ninvisible(dev.off())\ngd$preview(plot_air = TRUE)\n```\n:::\n\n\nand plotted with the EleksDraw using the below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngd <- eleks_dev('A6', portrait = FALSE, margins = 5, ignore_color = TRUE)\np\ninvisible(dev.off())\n```\n:::\n\n\nFor each of the below examples, we show the `ggplot2` graph as a png, the output of the `fawkes::ghost_dev()` preview, and finally a picture of the plot on paper.\n\n### Facets with mtcars\n\nThe first plot is copied straight from the [`fawkes` examples](https://fawkes.data-imaginist.com/#examples). It plots the famous `mtcars` dataset using facets and demonstrates the capabilities of the `fawkes` library.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(mtcars) +\n  geom_point(aes(disp, mpg)) +\n  facet_wrap(~ gear) +\n  theme_bw(base_size = 6) +\n  theme(\n    plot.background = element_blank(),\n    panel.background = element_blank()\n  )\n```\n:::\n\n\n![mtcars, png](/post/2021-01-04-eleksdraw-pen-plotter-with-r/facets_png.png){width=400px}\n\n![mtcars, preview](/post/2021-01-04-eleksdraw-pen-plotter-with-r/facets_air.png){width=400px}\n\n![mtcars, pen on paper](/post/2021-01-04-eleksdraw-pen-plotter-with-r/facets_plot.png){width=400px}\n\n\n### Harmonograph\n\nThe below code generates a random [harmonograph](https://en.wikipedia.org/wiki/Harmonograph), one instance of which I plotted.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf1=jitter(sample(c(2,3),1));f2=jitter(sample(c(2,3),1));f3=jitter(sample(c(2,3),1));f4=jitter(sample(c(2,3),1))\nd1=runif(1,0,1e-02);d2=runif(1,0,1e-02);d3=runif(1,0,1e-02);d4=runif(1,0,1e-02)\np1=runif(1,0,pi);p2=runif(1,0,pi);p3=runif(1,0,pi);p4=runif(1,0,pi)\nharmonograph <- data.frame(t = seq(0, 80*pi, 80*pi/10000)) %>%\n  transmute(\n    x = exp(-d1*t)*sin(t*f1+p1) + exp(-d2*t)*sin(t*f2+p2),\n    y = exp(-d3*t)*sin(t*f3+p3) + exp(-d4*t)*sin(t*f4+p4)\n  )\n\np <- harmonograph %>%\n  ggplot(aes(x, y)) +\n  geom_path() +\n  theme_bw(base_size = 6) +\n  theme_void()\n```\n:::\n\n\n\n![Harmonograph, png](/post/2021-01-04-eleksdraw-pen-plotter-with-r/harmonograph_png.png){width=400px}\n\n![Harmonograph, preview](/post/2021-01-04-eleksdraw-pen-plotter-with-r/harmonograph_air.png){width=400px}\n\n![Harmonograph, pen on paper](/post/2021-01-04-eleksdraw-pen-plotter-with-r/harmonograph_plot.png){width=400px}\n\n\n### Georg Nees - Schotter\n\nThe below generates falling squares like [Schotter](https://collections.vam.ac.uk/item/O221321/schotter-print-nees-georg/), by generative art pioneer Georg Nees. It can be seen that there was some slippage at the belt which resulted in incomplete squares. After this plot I tightened the belt, which made the subsequent plots a lot more accurate. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_cols <- 12\nn_rows <- 22\n\np <- expand_grid(col = 0:(n_cols-1),\n            row = 0:(n_rows-1),\n            tibble(x = c(-0.5, 0.5,  0.5, -0.5),\n                   y = c( 0.5, 0.5, -0.5, -0.5))) %>%\n  group_by(col, row) %>%\n  mutate(angle = rnorm(1, sd = row/60),\n         xn = x*cos(angle) - y*sin(angle),\n         y = x*sin(angle) + y*cos(angle),\n         x = xn) %>%\n  select(-xn) %>%\n  mutate(x = x + 1 + col,\n         y = y + 1 - row,\n         x = x + rnorm(1)*row/80, # jitter\n         y = y + rnorm(1)*row/60) %>%\n  mutate(xend = lag(x, default = last(x)),\n         yend = lag(y, default = last(y))) %>%\n  ungroup() %>%\n  ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +\n  geom_segment() +\n  coord_fixed() +\n  theme_void()\n```\n:::\n\n\n![Schotter, png](/post/2021-01-04-eleksdraw-pen-plotter-with-r/schotter_png.png){width=400px}\n\n![Schotter, preview](/post/2021-01-04-eleksdraw-pen-plotter-with-r/schotter_air.png){width=400px}\n\n![Schotter, pen on paper](/post/2021-01-04-eleksdraw-pen-plotter-with-r/schotter_plot.png){width=400px}\n\n\n# Provinces of The Netherlands\n\nWe can use the excellent [`sf` package](https://r-spatial.github.io/sf/) to load and plot spatial data with `ggplot2`, like a map of the province boundaries of the Netherlands. Below, we load [provinces data from CBS](https://www.pdok.nl/introductie/-/article/cbs-provincies) with `sf::st_read()`, simplify it to decrease the complexity of the plot, and plot it with `ggplot2::geom_sf()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovinces <- st_read(\"https://geodata.nationaalgeoregister.nl/bestuurlijkegrenzen/wfs?request=GetFeature&service=WFS&version=1.1.0&typeName=bestuurlijkegrenzen:provincies\")\n\np <- provinces %>% \n  st_transform(54032) %>% # Azimuthal equidistant\n  st_simplify(dTolerance = 400) %>% # simplify\n  st_transform(4326)  %>% # WGS84\n  ggplot() +\n  geom_sf(fill = NA) +\n  theme_void()\n```\n:::\n\n\n\n![Provinces of The Netherlands, png](/post/2021-01-04-eleksdraw-pen-plotter-with-r/nl_png.png){width=400px}\n\n![Provinces of The Netherlands, preview](/post/2021-01-04-eleksdraw-pen-plotter-with-r/nl_air.png){width=400px}\n\n![Provinces of The Netherlands, pen on paper](/post/2021-01-04-eleksdraw-pen-plotter-with-r/nl_plot.png){width=400px}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}