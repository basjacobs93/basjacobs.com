<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bas Jacobs</title>
    <link>/</link>
    <description>Recent content on Bas Jacobs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Trees and Tents</title>
      <link>/post/trees-and-tents/</link>
      <pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/trees-and-tents/</guid>
      <description>Trees and Tents is a logic game in which tents need to be placed in a grid. Every tent must be next to a tree, and tents cannot touch horizontally, vertically or diagonally. For every row and column, the number of tents is given.
The website https://brainbashers.com/tents.asp posts a new puzzle every day, of which a 12x12 example is the following:
A 12x12 Trees and Tents puzzle from https://brainbashers.com/tents.asp
 In this post, I will implement a solver for this puzzle in Julia using the JuMP package for mathematical optimization.</description>
    </item>
    
    <item>
      <title>Showing images on hover in Plotly with R</title>
      <link>/post/showing-images-on-hover-in-plotly-with-r/</link>
      <pubDate>Sun, 28 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/showing-images-on-hover-in-plotly-with-r/</guid>
      <description>For a project I was working on recently, I wanted to turn a ggplot scatterplot into an interactive visualisation: when hovering over a point, a corresponding image needed to be shown. I did not want to use Shiny, since I required the visualisation to be portable. This is possible by manually tinkering with html, but using the plotly and htmlwidgets packages, I was able to achieve what I wanted without the need to leave the comfy RStudio environment, and without needing to host the plot on the plot.</description>
    </item>
    
    <item>
      <title>Learning image representation with Keras in R</title>
      <link>/post/image-approximation-with-keras-in-r/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/image-approximation-with-keras-in-r/</guid>
      <description>An image can be viewed as a function mapping pixel locations \(x,y\) to color values \(R,G,B\). Since neural networks are function approximators, we can train such a network to approximate an image. The network is then a representation of the image as a function and its contents can be displayed by evaluating the network for all pixel pairs \(x,y\).
The Keras package for R is now approximately 1 year old but I have to admit that I usually go to Python to implement neural networks.</description>
    </item>
    
    <item>
      <title>Generating the logo for this site</title>
      <link>/post/generating-logo/</link>
      <pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/generating-logo/</guid>
      <description>I wanted a logo for my blog. Something kind of personal, but abstract; preferably something that could be drawn with a single path. I decided to download an elevation map of the Netherlands (where I live) to somehow use a plot of that data as my logo. I thought it would be nice to generate a side view and smooth it. In this short post I will discuss how I did it.</description>
    </item>
    
    <item>
      <title>Pen plotter</title>
      <link>/post/pen-plotter/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/pen-plotter/</guid>
      <description>Inspired by this blog post, I got interested in pen plotters and computer generated art. I liked the minimalist pieces of art a plotter could create, resembling a human hand doodling on a piece of paper. A lot of examples of this art can be found on Twitter at #plottertwitter. By far the most used plotter on Twitter is the AxiDraw, but since I didnâ€™t want to spend over 400 euros and I liked the prospect of assembling something myself, I decided to buy the EleksDraw which was around 100 euros and came completely unassembled.</description>
    </item>
    
  </channel>
</rss>